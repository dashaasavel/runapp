version: "3"

services:
  authservice-postgres:
    container_name: authservice-postgres
    image: postgres:${POSTGRES_TAG}
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: dasha
    networks:
      - runapp
    ports:
      - '5436:5432'

  authservice:
    container_name: authservice
    image: dashaasavel/runapp-authservice:${RUNAPP_TAG}
    build: ./authservice
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://host.docker.internal:5436/postgres
      REMOTEGRPC_USER_SERVICE_HOST_AND_PORT: 'userservice:8093'
      RABBIT_PRODUCER_HOST: 'rabbitmq'
      JAVA_OPTS: '
                -Dcom.sun.management.jmxremote
                -Dcom.sun.management.jmxremote.port=11386
                -Dcom.sun.management.jmxremote.rmi.port=11386
                -Dcom.sun.management.jmxremote.local.only=false
                -Dcom.sun.management.jmxremote.authenticate=false
                -Dcom.sun.management.jmxremote.ssl=false'
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8086/test" ]
      interval: 1m
      timeout: 10s
      retries: 3
    networks:
      - runapp
    ports:
      - '8086:8086'
      - '8096:8096' #grpc
      - '11386:11386' # jmx
      - '15386:15386' #debug
    depends_on:
      - authservice-postgres

  userservice-postgres:
    container_name: userservice-postgres
    image: postgres:${POSTGRES_TAG}
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: dasha
    networks:
      - runapp
    ports:
      - '5433:5432'

  userservice:
    container_name: userservice
    image: runapp/userservice:${RUNAPP_TAG}
    build: ./userservice
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://host.docker.internal:5433/postgres
      RABBIT_PRODUCER_HOST: 'rabbitmq'
      JAVA_OPTS: '
                -Dcom.sun.management.jmxremote
                -Dcom.sun.management.jmxremote.port=11383
                -Dcom.sun.management.jmxremote.rmi.port=11383
                -Dcom.sun.management.jmxremote.local.only=false
                -Dcom.sun.management.jmxremote.authenticate=false
                -Dcom.sun.management.jmxremote.ssl=false'
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/test" ]
      interval: 1m
      timeout: 10s
      retries: 3
    networks:
      - runapp
    ports:
      - '8083:8083'
      - '8093:8093' #grpc
      - '11383:11383' # jmx
      - '15383:15383' #debug
    depends_on:
      - userservice-postgres

  runservice-postgres:
    container_name: runservice-postgres
    image: postgres:${POSTGRES_TAG}
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: dasha
    networks:
      - runapp
    ports:
      - '5434:5432'

  runservice:
    container_name: runservice
    image: dashaasavel/runapp-runservice:${RUNAPP_TAG}
    build: ./runservice
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://host.docker.internal:5434/postgres
      SPRING_DATA_MONGODB_URI: mongodb://mongodb:27017/docker-db
      REMOTEGRPC_USER_SERVICE_HOST_AND_PORT: 'userservice:8093'
      RABBIT_CONSUMER_HOST: 'rabbitmq'
      JAVA_OPTS: '
                -Dcom.sun.management.jmxremote
                -Dcom.sun.management.jmxremote.port=11382
                -Dcom.sun.management.jmxremote.rmi.port=11382
                -Dcom.sun.management.jmxremote.local.only=false
                -Dcom.sun.management.jmxremote.authenticate=false
                -Dcom.sun.management.jmxremote.ssl=false'
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8082/" ]
      interval: 1m
      timeout: 10s
      retries: 3
    networks:
      - runapp
    ports:
      - '8082:8082'   #http
      - '8092:8092'   #grpc
      - '11382:11382' # jmx
      - '15382:15382' #debug
    depends_on:
      - mongodb
      - runservice-postgres
      - rabbitmq

  mongodb:
    container_name: mongodb
    image: mongo:${MONGO_TAG}
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: admin
#      MONGO_INITDB_ROOT_PASSWORD: password
#      MONGO_INITDB_DATABASE: runapp
#      MONGO_INITDB_DATABASE: runapp
    healthcheck:
      test:  echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - runapp
    ports:
      - '27017:27017'

  rabbitmq:
    container_name: rabbitmq
    image: dashaasavel/runapp-rabbitmq:${RABBITMQ_TAG}
    build: ./rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    networks:
      - runapp
    ports:
      - '5672:5672'   # amqp
      - '15672:15672' # http

  mailservice:
    container_name: mailservice
    image: dashaasavel/runapp-mailservice:${RUNAPP_TAG}
    build: ./mailservice
    environment:
      RABBIT_CONSUMER_HOST: 'rabbitmq'
      JAVA_OPTS: '
                -Dcom.sun.management.jmxremote
                -Dcom.sun.management.jmxremote.port=11385
                -Dcom.sun.management.jmxremote.rmi.port=11385
                -Dcom.sun.management.jmxremote.local.only=false
                -Dcom.sun.management.jmxremote.authenticate=false
                -Dcom.sun.management.jmxremote.ssl=false'
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8085/" ]
      interval: 1m
      timeout: 10s
      retries: 3
    networks:
      - runapp
    ports:
      - '8085:8085'   #http
      - '8095:8095'   #grpc
      - '11385:11385' # jmx
      - '15385:15385' #debug
    depends_on:
      - rabbitmq

networks:
  runapp:
    driver: bridge